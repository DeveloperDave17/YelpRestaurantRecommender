package com.yelp.restaurantFinder;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

/**
 * A class with static functions that are used to retrieve information from json files via Gson.
 */
public class GsonDataRetriever {

    /**
     * Establishes the file where business json data exists and calls the readBusinessJsonStreamHM
     * @return A HashMap containing a mapping from business_id to business for all restaurants.
     * @throws IOException if the business json file is not found.
     */
    public static HashMap<String,Business> getBusinessHashMap() throws IOException {
        File theBusinessFile = new File("../yelp_academic_dataset_business.json");
        FileInputStream businessStream = new FileInputStream(theBusinessFile);
        return readBusinessJsonStreamHM(businessStream);
    }

    /**
     * Sets up the JsonReader, calls the readBusinessesHM function and closes the reader if anything goes wrong.
     * @param in the inputstream generated by GetBusinessHashMap.
     * @return the HashMap mapping business_id to business.
     * @throws IOException
     */
    private static HashMap<String,Business> readBusinessJsonStreamHM(InputStream in) throws IOException {
        JsonReader reader = new JsonReader(new InputStreamReader(in, "UTF-8"));
        reader.setLenient(true);
        try{
            return readBusinessesHM(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Adds all businesses returned by readBusiness that are restaurants to a list, then filters the list for
     * restaurants that 200+ reviews, 3 or more stores, and are still in operation.
     * @param reader initialized in readBusinessJsonStreamHM
     * @return A HashMap mapping business_id to business.
     * @throws IOException
     */
    private static HashMap<String,Business> readBusinessesHM(JsonReader reader) throws IOException {
        List<Business> businesses = new ArrayList<>();
        HashMap<String, Business> businessesMap = new HashMap<>();

        while (reader.hasNext()) {
            Business business = readBusiness(reader);
            if (business.getIsRestaurant()){
                businesses.add(business);
            }
        }

        for (Business business: businesses){
            if (business.getReview_count() >= 200 && business.getStars() >= 3 && business.getIsOpen() == 1 ){
                businessesMap.put(business.getBusiness_id(), business);
                // Used to enforce a size of 10000 businesses to meet project specifications
                if ( businessesMap.size() == 10000 )
                    return businessesMap;
            }
        }
        return businessesMap;
    }

    /**
     * Establishes the file where business json data exists and calls the readBusinessJsonStreamL
     * @return A list containing all the businesses that match our specified criteria of being a restaurant,
     * having 200+ reviews, 3 or more stars, and are currently in operation.
     * @throws IOException
     */
    public static List<Business> getBusinessList() throws IOException {
        File theBusinessFile = new File("../yelp_academic_dataset_business.json");
        FileInputStream businessStream = new FileInputStream(theBusinessFile);
        return readBusinessJsonStreamL(businessStream);
    }

    private static List<Business> readBusinessJsonStreamL(InputStream in) throws IOException {
        JsonReader reader = new JsonReader(new InputStreamReader(in, "UTF-8"));
        reader.setLenient(true);
        try{
            return readBusinessesL(reader);
        } finally {
            reader.close();
        }
    }

    private static List<Business> readBusinessesL(JsonReader reader) throws IOException {
        List<Business> businesses = new ArrayList<>();

        while (reader.hasNext()) {
            Business business = readBusiness(reader);
            if (business.getIsRestaurant() & business.getReview_count() >= 200 && business.getStars() >= 3 &&
                business.getIsOpen() == 1){
                businesses.add(business);
            }
        }

        return businesses;
    }

    /**
     * Reads all the necessary information for a business in from the business json file.
     * @param reader the JsonReader object created for reading the business json file.
     * @return A business with all the necessary data.
     * @throws IOException
     */
    private static Business readBusiness(JsonReader reader) throws IOException {
        String business_id = null;
        String businessName = null;
        double latitude = 0;
        double longitude = 0;
        double stars = 0;
        int review_count = 0;
        List<String> categories = null;
        boolean isRestaurant = false;
        int isOpen = 0;

        reader.beginObject();
        categories = new ArrayList<>();
        while (reader.hasNext()) {
            String name = reader.nextName();
            if (name.equals("business_id")) {
                business_id = reader.nextString();
            } else if (name.equals("latitude")) {
                latitude = reader.nextDouble();
            } else if (name.equals("longitude")) {
                longitude = reader.nextDouble();
            } else if (name.equals("stars")){
                stars = reader.nextDouble();
            } else if (name.equals("review_count")){
                review_count = reader.nextInt();
            } else if (name.equals("name")){
                businessName = reader.nextString();
            } else if (name.equals("is_open")){
                isOpen = reader.nextInt();
            } else if (name.equals("categories")) {
                // Ensures the array is not empty before being read
                if (!reader.peek().equals(JsonToken.NULL)) {
                    String category = reader.nextString();
                    // Checking for restaurants
                    if (category.contains("Restaurants") | category.contains("Food")){
                        // Checking to see if the categories were all mashed into one string
                        if (category.contains(",")){
                            categories = Arrays.stream(category.split(",")).toList();
                        }else{
                            categories.add(category);
                        }
                        isRestaurant = true;
                    } else {
                        categories.add(category);
                    }
                } else{
                    reader.nextNull();
                }
            } else {
                reader.skipValue();
            }
        }
        reader.endObject();
        return new Business(business_id, businessName, latitude, longitude, stars, review_count, categories,
                isRestaurant, isOpen);
    }

    /**
     * Gets a list of all reviews that have a business_id that exists in a previously generated hashmap, utilizing Gson.
     * @param businessHashMap maps business_id to business for all the relevant businesses.
     * @return a list of reviews
     * @throws IOException
     */
    public static List<Review> getReviewList(HashMap<String,Business> businessHashMap) throws IOException {
        File theReviewFile = new File("../yelp_academic_dataset_review.json");
        FileInputStream reviewStream = new FileInputStream(theReviewFile);
        return readReviewJsonStream(reviewStream, businessHashMap);
    }

    private static List<Review> readReviewJsonStream(InputStream in, HashMap<String,Business> businesses) throws IOException {
        JsonReader reader = new JsonReader(new InputStreamReader(in, "UTF-8"));
        reader.setLenient(true);
        try{
            return readReviews(reader,businesses);
        } finally {
            reader.close();
        }
    }

    private static List<Review> readReviews(JsonReader reader, HashMap<String,Business> businesses) throws IOException {
        List<Review> reviews = new ArrayList<>();

        // Used to store the review count for businesses allows enforcing of 5 associated reviews per business
        HashMap<String, Integer> reviewCountForBusinesses = new HashMap<>();

        for (String businessName : businesses.keySet()){
            reviewCountForBusinesses.put(businessName, 0);
        }

        int i = 0;

        while (reader.hasNext() & i < 50000) {
            Review review = readReview(reader);
            String businessId = review.getBusiness_id();
            /*
                Guarantees the reviews associated business is a target business and requires that at most 5 reviews
                exist for the associated business
             */
            if (businesses.containsKey(businessId) && reviewCountForBusinesses.get(businessId) < 5){
                Business business = businesses.get(businessId);
                double starsHi = (int)(business.getStars() + 1);
                double starsLo = (int)(business.getStars());
                if (review.getStars() >= starsLo | review.getStars() <= starsHi) {
                    reviews.add(review);
                    // Updates the hashmap to reflect the businesses current review count
                    reviewCountForBusinesses.replace(businessId, reviewCountForBusinesses.get(businessId) + 1);
                    i++;
                }
            }
        }
        return reviews;
    }

    private static Review readReview(JsonReader reader) throws IOException {
        String business_id = null;
        String reviewID = null;
        int stars = 0;
        String text = null;
        int useful = 0;

        reader.beginObject();
        while (reader.hasNext()) {
            String name = reader.nextName();
            if (name.equals("business_id")) {
                business_id = reader.nextString();
            } else if (name.equals("stars")) {
                stars = reader.nextInt();
            } else if (name.equals("text")) {
                text = reader.nextString();
            } else if (name.equals("useful")) {
                useful = reader.nextInt();
            } else if (name.equals("review_id")) {
                reviewID = reader.nextString();
            } else {
                reader.skipValue();
            }
        }
        reader.endObject();
        return new Review(business_id, reviewID, stars, text, useful);
    }
}
